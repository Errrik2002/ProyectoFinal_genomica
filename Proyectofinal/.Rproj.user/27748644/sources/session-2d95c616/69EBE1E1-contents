install.packages("dplyr") 
library(dplyr)# To manipulate dataframes
install.packages("readxl")    # To read Excel files into R
library(readxl)
install.packages("ggplot2")   # for high quality graphics
library(ggplot2)


library(phyloseq)



practica <- read_excel("")


practica


otu_mat<- read_excel("R_tutorials-master/R_tutorials-master/data/CARBOM data.xlsx", sheet = "OTU matrix" ) 

tax_mat<- read_excel("R_tutorials-master/R_tutorials-master/data/CARBOM data.xlsx", sheet = "Taxonomy table") 
#son multiplrd hojas y permite #escoger entre hojas especificas
samples_df <- read_excel("R_tutorials-master/R_tutorials-master/data/CARBOM data.xlsx", sheet = "Samples")


otu_mat
tax_mat
samples_df

library(dbplyr)

tax_mat <- tax_mat %>% 
  tibble::column_to_rownames("otu")
tax_mat


samples_df <- samples_df %>% 
  tibble::column_to_rownames("sample") 
samples_df

###########

otu_mat <- as.matrix(otu_mat)

tax_mat <- as.matrix(tax_mat)


class(otu_mat)

#a matrix

#pasarelo a Phyloseq

library(phyloseq)

OTU = otu_table(otu_mat, taxa_are_rows = TRUE)

TAX = tax_table(tax_mat)

samples = sample_data(samples_df)

carbom <- phyloseq(OTU, TAX, samples)
carbom


#####todo esto es para contruir de un objeto ya sea de excel a phyloseq
#entonces no lo requerimos ahorita



load("04_Processed_Data/ps.RData")


ps #el ps lo cargamos

sample_names(ps) #visualizamos los nombres


rank_names(ps)

sample_variables(ps)


#
#ps<- subset_taxa(ps, Division %in% c(""))
#
#esto es para escoger un subset especifico

#==== pq especificamos que sea asi

total = median(sample_sums(ps))

standf = function(x, t=total) round(t * (x / sum(x)))

#carbom = transform_sample_counts(carbom, standf)
 ps = transform_sample_counts(ps, standf)

 
 ps

 
 library(ggplot2)
         #plot_bar(carbom, fill = "Division")
         
         
 plot_bar(ps, fill = "Family") #hacer graficas de abundancia
 
 ########################################################################
##################################################################
 ########################################

 
 ##########################################
 
ps



sample_names(ps)
#nuevamente ver las variable spor laS QUE PODEMOS DIVIDIR

rank_names(ps)

sample_variables(gp)
 
plot_net(ps, type = "taxa", point_label = "Genus", point_size = 10, point_alpha = 0.5, maxdist = 0.5, color = "Genus", distance = "bray", laymeth = "auto") 


##############

install.packages("ampvis2")

library(ampvis2)


amp_rankabundance(ps, log10_x = F, group_by = "Family")

install.packages("remotes")
remotes::install_github("kasperskytte/ampvis2")
#se instala desde github


#requiere varias cosas en ampvis2, pasarlo a objetos, pero requiere
#otu tabla y tax table? en ampvis


##########################



subset_taxa(ps, Genus=="Bacillus") -> ps.bacillus

# Luego nos quedamos con las muestras que solo cumplen con la condición, i,e, que poseen una abundancia de _Moraxella_ de más de 5 reads
prune_samples(sample_sums(ps.bacillus)>=5, ps.bacillus) -> ps.bacillus

# Y finalmente visualizamos los resultados mapeados en el árbol filogenético
plot_tree(ps.bacillus, color="species", shape="Family", label.tips="Genus", size="abundance")


phy_tree(ps)
##########sale error en la grafica

##############################07 de Junio del 2023##################################


devtools::install_github("beadyallen/MGnifyR")

library(phyloseq)
library(MGnifyR)


load("04_Processed_Data/ps.RData")

mgnify_get_analyses_phyloseq(ps)

rank_names(ps)

sample_names(ps)

sample_variables(gp)




mgnify_analyses_from_samples(ps, "01_Raw_Data/MiSeq_SOP/F3D141_S207_L001_R1_001.fastq")
#Error in mgnify_retrieve_json(client, paste(typeX, x, sep = "/"), usecache = usecache) : 
  #no slot of name "warnings" for this object of class "phyloseq"



################################################################
##############################################################

########################  MGnifyR##################################
##############AHORA SI BIEN############################






#################

#Set up the MGnify client instance
mgclnt <- mgnify_client(usecache = T, cache_dir = '/tmp/MGnify_cache') #esto se conecta a base de datos
mgclnt
#Retrieve the list of analyses associated with a study
accession_list <- mgnify_analyses_from_studies(mgclnt, "MGYS00006009", usecache = T)
#nos permite conectarnos a esa base de datos en especifico, el numerito en verde

#Download all associated study/sample and analysis metadata
meta_dataframe <- mgnify_get_analyses_metadata(mgclnt, accession_list, usecache = T )

meta_dataframe #guarda los datos que pedimos

#Convert analyses outputs to a single `phyloseq` object
psobj <- mgnify_get_analyses_phyloseq(mgclnt, meta_dataframe$analysis_accession, usecache = T)
psobj #lo convierte ya en un objeto phyloseq

rank_names(psobj)

sample_names(psobj)

sample_variables(psobj)

#Retrieve Interpro assignment counts for these analyses
#ip_df <- mgnify_get_analyses_results(mgclnt, meta_dataframe$analysis_accession, retrievelist = c("interpro-identifiers"), usecache = T)
#head(ip_df)

plot_net(psobj, type = "taxa", point_label = "Class", point_size = 10, point_alpha = 0.5, maxdist = 0.5, color = "Phylum", distance = "bray", laymeth = "auto") 


###########################

plot_bar(psobj, fill = "Species")



mgclnt <- mgnify_client(usecache = T, cache_dir = '/tmp/MGnify_cache') #esto se conecta a base de datos
mgclnt
#Retrieve the list of analyses associated with a study
accession_list1 <- mgnify_analyses_from_studies(mgclnt, "MGYS00006005", usecache = T)
#nos permite conectarnos a esa base de datos en especifico, el numerito en verde

#Download all associated study/sample and analysis metadata
meta_dataframe1 <- mgnify_get_analyses_metadata(mgclnt, accession_list1, usecache = T )

meta_dataframe1 #guarda los datos que pedimos

#Convert analyses outputs to a single `phyloseq` object
psobj1 <- mgnify_get_analyses_phyloseq(mgclnt1, meta_dataframe1$analysis_accession1, usecache = T)
psobj1 #lo convierte ya en un objeto phyloseq

rank_names(psobj1)

sample_names(psobj1)

sample_variables(psobj1)





